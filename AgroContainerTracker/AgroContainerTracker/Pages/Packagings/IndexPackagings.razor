@page "/packagings"

@using AgroContainerTracker.Domain.Packagings
@using AgroContainerTracker.Domain.Companies

@using AgroContainerTracker.Core.Services
@inject IPackagingService packagingService
@inject ICustomerService customerService
@inject NavigationManager navigationManager
@inject DialogService dialogService
@inject NotificationService notificationService

<Loading ShowSpinner="@isLoading"></Loading>

<h1>Gestión de envases</h1>

<div class="row mt-5">
    <div class="col-lg-4">
        <a href="/packagings/create" class="btn btn-outline-primary"><span class="oi oi-plus"></span> Agregar envase</a>
    </div>
    <div class="col-lg-8">
        <div class="float-right">
            <RadzenButton Text="Nueva entrada" Click="() => ShowNewMovementDialog(Operation.Add)" Icon="assignment_returned" class="btn btn-outline-primary" />
            <RadzenButton Text="Nueva salida" Click="() => ShowNewMovementDialog(Operation.Substract)" Icon="local_shipping" class="btn btn-outline-primary" />
        </div>
    </div>
</div>

@if (packagings == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div class="row mt-5">
        <div class="col-lg-12">
            <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10"
                        AllowSorting="true" Data="@packagings" TItem="Packaging" ColumnWidth="100px" EmptyText="No se han encontrado resultados.">
                <Columns>
                    <RadzenGridColumn TItem="Packaging" Property="Code" Title="Código Envase">
                        <FooterTemplate>
                            Total: <b>@packagings.Count()</b>
                        </FooterTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Packaging" Property="Type.ToString()" Title="Tipo" />
                    <RadzenGridColumn TItem="Packaging" Property="Material.ToString()" Title="Material" />
                    <RadzenGridColumn TItem="Packaging" Property="Weight" Title="Peso" TextAlign="TextAlign.Right" />
                    <RadzenGridColumn TItem="Packaging" Property="Owner.Name" Title="Propietario" Width="200px" />
                    <RadzenGridColumn TItem="Packaging" Property="Total" Title="Cantidad" TextAlign="TextAlign.Right" />

                    <RadzenGridColumn TItem="Packaging" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="50px">
                        <Template Context="data">
                            <span class="oi oi-magnifying-glass" @onclick="() => OpenPackagingDetails(data.PackagingId)"></span>
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Packaging" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="50px">
                        <Template Context="data">
                            <span class="oi oi-pencil" @onclick="() => OpenPackagingEdit(data.PackagingId)"></span>
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Packaging" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="50px">
                        <Template Context="data">
                            <span class="oi oi-trash" @onclick="() => ShowRemovePackagingDialog(data)"></span>
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>
    </div>
}

@code {
    private List<Packaging> packagings = new List<Packaging>();
    private List<Customer> customers = new List<Customer>();
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            packagings = await packagingService.GetAllAsync();
            customers = await customerService.GetAllAsync().ConfigureAwait(false);
            isLoading = false;
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    private void OpenPackagingDetails(int packagingId)
    {
        navigationManager.NavigateTo($"/packagings/details/{packagingId}");
    }

    private void OpenPackagingEdit(int packagingId)
    {
        navigationManager.NavigateTo($"/packagings/edit/{packagingId}");
    }

    private async Task ShowRemovePackagingDialog(Packaging packaging)
    {
        await dialogService.OpenAsync("Eliminar envase", ds =>
            @<div class="text-center" style="padding: 20px;">
                <p Style="margin-bottom: 10px;">¿Estás seguro de que quieres borrar este envase?</p>
                <div class="row">
                    <div class="col-md-12 text-center">
                        <RadzenButton Text="Cancelar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" />
                        <RadzenButton Text="Eliminar" Click="() => RemovePackaging(packaging)" ButtonStyle="ButtonStyle.Danger" />
                    </div>
                </div>
            </div>
            );
    }

    private async Task ShowNewMovementDialog(Operation operation)
    {
        string dialogTitle = operation.Equals(Operation.Add) ? "Nueva entrada" : "Nueva salida";
        AddPackagingMovementRequest packagingMovement = new AddPackagingMovementRequest
        {
            Operation = operation,
            Created = DateTime.Now
        };

        await dialogService.OpenAsync(dialogTitle, ds =>
            @<EditForm Model="@packagingMovement" OnValidSubmit="() => AddPackagingMovement(packagingMovement)">
                <FluentValidator />
                <div>
                    <div class="row">
                        <div class="form-group col-lg-6">
                            <label for="type">Envase:</label>
                            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Data="@packagings" @bind-Value="packagingMovement.PackagingId"
                                            TextProperty="Code" ValueProperty="PackagingId" Style="display: block;" />
                            <ValidationMessage For="() => packagingMovement.PackagingId"/>

                        </div>
                        <div class="form-group col-lg-6">
                            <label for="type">Fecha:</label>
                            <InputDate @bind-Value="packagingMovement.Created" class="form-control" />
                            <ValidationMessage For="() => packagingMovement.Created" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-6">
                            <label for="type">Cliente:</label>
                            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Data="@customers" @bind-Value="packagingMovement.CustomerId"
                                            TextProperty="Name" ValueProperty="CustomerId" Style="display: block;" />
                            <ValidationMessage For="() => packagingMovement.CustomerId"/>
                        </div>
                        <div class="form-group col-lg-6">
                            <label for="type">Cantidad:</label>
                            <InputNumber id="amount" name="amount" @bind-Value="packagingMovement.Amount" class="form-control" />
                            <ValidationMessage For="() => packagingMovement.Amount" />
                        </div>
                    </div>

                    <hr />
                    <div class="row mt-4 mb-4">
                        <div class="col-lg-12">
                            <div class="float-right">
                                <button type="button" class="btn btn-outline-dark" @onclick="() => ds.Close(false)">Cancelar</button>
                                <button type="submit" class="btn btn-success"><span class="oi oi-check"></span> Guardar cambios</button>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>

        );
    }

    private async Task AddPackagingMovement(AddPackagingMovementRequest packagingMovement)
    {
        if (packagingMovement != null)
        {
            string operation = packagingMovement.Operation.Equals(Operation.Add) ? "entrada" : "salida";
            Packaging updatedPackaging = await packagingService.AddPackagingMovementAsync(packagingMovement);
            NotificationMessage message;

            if (updatedPackaging != null)
            {
                dialogService.Close(true);

                packagings.FirstOrDefault(x => x.Code.Equals(updatedPackaging.Code)).Total = updatedPackaging.Total;
                await InvokeAsync(() => { StateHasChanged(); });

                message = new NotificationMessage()
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Gestión completada",
                    Detail = $"La {operation} para el envase {updatedPackaging.Code} se ha guardado correctamente.",
                    Duration = 4000
                };
            }
            else
            {
                message = new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = $"Se ha producido un error crear la {operation}.",
                    Duration = 4000
                };
            }

            Notify(message);
        }
    }

    private async Task RemovePackaging(Packaging packaging)
    {
        NotificationMessage message;
        bool deleted = await packagingService.DeleteAsync(packaging.PackagingId).ConfigureAwait(false);
        dialogService.Close(true);


        if (deleted)
        {
            packagings.Remove(packaging);
            await InvokeAsync(() => { StateHasChanged(); });

            message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = "Envase eliminado",
                Detail = "El envase se ha eliminado correctamente",
                Duration = 4000
            };
        }
        else
        {
            message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Se ha producido un error al borrar el envase.",
                Duration = 4000
            };
        }

        Notify(message);
    }

    private void Notify(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}
