@page "/envases/editar/{Id:int}"

@using AgroContainerTracker.Domain.Packagings
@using AgroContainerTracker.Domain.Companies

@using AgroContainerTracker.Core.Services

@inject IPackagingService packagingService
@inject ICustomerService customerService

@inject NavigationManager NavigationManager
@inject NotificationService notificationService

<Loading ShowSpinner="@isLoading"></Loading>

<h1>Editar Envase</h1>

<div class="row mt-4">
    <div class="col-sm-4">
        <NavLink class="nav-link" href="/envases" Match="NavLinkMatch.All">
            <span class="oi oi-arrow-left"></span> Volver a la lista
        </NavLink>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (packaging == null)
{
    <p><em>No se ha encontrado el envase @Id</em></p>
}
else
{
    <EditForm Model="@packaging" OnValidSubmit="UpdatePackaging">
        <FluentValidator />

        <RadzenFieldset Text="INFORMACIÓN" class="mt-4">
            <div class="row">
                <div class="form-group col-lg-6">
                    <label for="code">Código Envase:</label>
                    <InputText id="code" @bind-Value="packaging.Code" class="form-control" />
                    <ValidationMessage For="@(() => packaging.Code)" />
                </div>
                <div class="form-group col-lg-6">
                    <label for="type">Tipo:</label>
                    <RadzenDropDown AllowClear="true" AllowFiltering="false"
                                    Data="@Enum.GetValues(typeof(PackagingType))" @bind-Value="packaging.Type"
                                    Style="display: block;" Required />
                    <ValidationMessage For="@(() => packaging.Type)" />
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-6">
                    <label for="material">Material:</label>
                    <RadzenDropDown AllowClear="true" AllowFiltering="false"
                                    Data="@Enum.GetValues(typeof(PackagingMaterial))" @bind-Value="packaging.Material"
                                    Style="display: block;" Required />
                    <ValidationMessage For="@(() => packaging.Material)" />
                </div>
                <div class="form-group col-lg-6">
                    <label for="color">Color:</label>
                    <InputText id="color" @bind-Value="packaging.Color" class="form-control" />
                    <ValidationMessage For="@(() => packaging.Color)" />
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-6">
                    <label for="owner">Propietario:</label>
                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    Data="@customers" @bind-Value="packaging.Owner"
                                    TextProperty="Name" TValue="Customer" Style="display: block;" Required />
                    <ValidationMessage For="@(() => packaging.Owner)" />
                </div>
                <div class="form-group col-lg-6">
                    <label for="description">Descripción:</label>
                    <InputTextArea id="description" @bind-Value="packaging.Description" class="form-control" />
                    <ValidationMessage For="@(() => packaging.Description)" />
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-6">
                    <label for="total">Cantidad:</label>
                    <InputNumber id="total" name="total" @bind-Value="packaging.Total" class="form-control" />
                    <ValidationMessage For="@(() => packaging.Total)" />
                </div>
                <div class="form-group col-lg-6">
                    <label for="weight">Peso:</label>
                    <InputNumber id="weight" name="weight" @bind-Value="packaging.Weight" class="form-control" />
                    <ValidationMessage For="@(() => packaging.Weight)" />
                </div>

            </div>
        </RadzenFieldset>

        <hr />
        <div class="row mt-4 mb-4">
            <div class="col-lg-12">
                <div class="float-right">
                    <button type="button" class="btn btn-outline-dark" @onclick="OnCancel">Cancelar</button>
                    <button type="submit" class="btn btn-success"><span class="oi oi-check"></span> Guardar cambios</button>
                </div>
            </div>
        </div>
    </EditForm>
}



@code {
    [Parameter]
    public int Id { get; set; }

    private Packaging packaging = new Packaging();
    private List<Customer> customers = new List<Customer>();
    private string errorMessage;
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            packaging = await packagingService.GetByIdAsync(Id).ConfigureAwait(false);
            customers = await customerService.GetAllAsync().ConfigureAwait(false);
            isLoading = false;
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    public async Task UpdatePackaging()
    {
        bool updated = await packagingService.UpdateAsync(packaging).ConfigureAwait(false);

        if (updated)
        {
            var message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = "Envase actualizado",
                Detail = "El envase se ha actualizado correctamente",
                Duration = 4000
            };
            Notify(message);
            NavigationManager.NavigateTo("envases");
        }
        else
        {
            errorMessage = "Se ha producido un error. Inténtelo de nuevo.";
            var message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Se ha producido un error al actualizar el envase.",
                Duration = 4000
            };
            Notify(message);
        }
    }

    public void OnCancel()
    {
        NavigationManager.NavigateTo("envases");
    }

    private void Notify(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}
