@page "/suppliers/edit/{Id:int}"

@using AgroContainerTracker.Domain.Companies
@using AgroContainerTracker.Domain

@using AgroContainerTracker.Core.Services

@inject ISupplierService supplierService
@inject ICountryService countryService
@inject NavigationManager NavigationManager
@inject NotificationService notificationService

<h1>Editar Proveedor</h1>

<div class="row mt-4">
    <div class="col-sm-4">
        <NavLink class="nav-link" href="/companies" Match="NavLinkMatch.All">
            <span class="oi oi-arrow-left"></span> Volver a la lista
        </NavLink>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (supplier == null)
{
    <p><em>No se ha encontrado el proveedor @Id</em></p>
}
else
{

    <EditForm Model="@supplier" OnValidSubmit="UpdateSupplier">
        <DataAnnotationsValidator />

        <RadzenFieldset Text="INFORMACIÓN" class="mt-4">
            <div class="row">
                <div class="form-group col-lg-2">
                    <label for="number">Nº Proveedor:</label>
                    <InputNumber id="number" name="number" @bind-Value="supplier.SupplierNumber" class="form-control" />
                    <ValidationMessage For="@(() => supplier.SupplierNumber)" />
                </div>
                <div class="form-group col-lg-5">
                    <label for="name">Nombre:</label>
                    <InputText id="name" @bind-Value="supplier.Name" class="form-control" />
                    <ValidationMessage For="@(() => supplier.Name)" />
                </div>
                <div class="form-group col-lg-5">
                    <label for="cif">CIF:</label>
                    <InputText id="cif" name="cif" @bind-Value="supplier.CompanyCode" class="form-control" />
                    <ValidationMessage For="@(() => supplier.CompanyCode)" />
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-6">
                    <label for="name">Contacto:</label>
                    <InputText id="name" @bind-Value="supplier.ContactName" class="form-control" />
                </div>
                <div class="form-group col-lg-6">
                    <label for="email">Email:</label>
                    <InputText id="email" @bind-Value="supplier.Email" class="form-control" />
                    <ValidationMessage For="@(() => supplier.Email)" />

                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-6">
                    <label for="phone">Teléfono:</label>
                    <InputText id="phone" @bind-Value="supplier.Phone" class="form-control" />
                    <ValidationMessage For="@(() => supplier.Phone)" />

                </div>
                <div class="form-group col-lg-6">
                    <label for="mobile">Móvil:</label>
                    <InputText id="mobile" @bind-Value="supplier.Mobile" class="form-control" />
                    <ValidationMessage For="@(() => supplier.Mobile)" />
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-12">
                    <label for="description">Observaciones:</label>
                    <InputTextArea id="description" @bind-Value="supplier.Description" class="form-control" />
                    <ValidationMessage For="@(() => supplier.Description)" />
                </div>
            </div>
        </RadzenFieldset>



        <RadzenFieldset Text="DIRECCIÓN" class="mt-2">
            <div class="row">
                <div class="form-group col-lg-8">
                    <label for="address">Dirección:</label>
                    <InputText id="address" @bind-Value="supplier.Address" class="form-control" />
                </div>
                <div class="form-group col-lg-4">
                    <label for="locality">Localidad:</label>
                    <InputText id="locality" @bind-Value="supplier.Locality" class="form-control" />
                </div>
            </div>

            <div class="row">
                <div class="form-group col-lg-4">
                    <label for="postal_code">Código Postal:</label>
                    <InputText id="postal_code" @bind-Value="supplier.PostalCode" class="form-control" />
                    <ValidationMessage For="@(() => supplier.PostalCode)" />

                </div>
                <div class="form-group col-lg-4">
                    <label for="state">Provincia:</label>
                    <InputText id="state" @bind-Value="supplier.State" class="form-control" />
                </div>
                <div class="form-group col-lg-4">
                    <label for="country">País:</label>
                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data="@countries" @bind-Value="supplier.Country.CountryId"
                                    TextProperty="Name" ValueProperty="CountryId" Style="display: block;" Required />
                </div>
            </div>
        </RadzenFieldset>


        <hr />
        <div class="row mt-4 mb-4">
            <div class="col-lg-12">
                <div class="float-right">
                    <button type="button" class="btn btn-outline-dark" @onclick="OnCancel">Cancelar</button>
                    <button type="submit" class="btn btn-success"><span class="oi oi-check"></span> Guardar cambios</button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public int Id { get; set; }
    public string errorMessage;

    private Supplier supplier = new Supplier();

    private IEnumerable<Country> countries;

    protected override async Task OnInitializedAsync()
    {
        supplier = await supplierService.GetByIdAsync(Id).ConfigureAwait(false);
        countries = await countryService.GetAll().ConfigureAwait(false);

    }

    public async Task UpdateSupplier()
    {
        try
        {
            bool updated = await supplierService.UpdateAsync(supplier).ConfigureAwait(false);

            if (updated)
            {
                var message = new NotificationMessage()
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Proveedor modificado",
                    Detail = "El proveedor se ha modificado correctamente",
                    Duration = 4000
                };
                Notify(message);
                NavigationManager.NavigateTo("companies");
            }
            else
                NotifyError();

        }
        catch (Exception)
        {
            errorMessage = "Se ha producido un error. Revise los campos e inténtelo de nuevo.";
            NotifyError();
        }
    }

    public void OnCancel()
    {
        NavigationManager.NavigateTo("companies");
    }

    private void Notify(NotificationMessage message)
    {
        notificationService.Notify(message);
    }

    private void NotifyError()
    {
        var message = new NotificationMessage()
        {
            Severity = NotificationSeverity.Error,
            Summary = "Error",
            Detail = "Se ha producido un error al modificar el proveedor.",
            Duration = 4000
        };
        Notify(message);
    }
}
