@page "/entradas/{CampaignId:int}/editar/{InputNumber:int}"

@using AgroContainerTracker.Domain.Companies
@using AgroContainerTracker.Core.Services

@inject ICustomerService customerService

@inject NavigationManager NavigationManager
@inject NotificationService notificationService

<h1>Editar Entrada</h1>

<div class="row mt-4">
    <div class="col-sm-4">
        <NavLink class="nav-link" href="/entradas" Match="NavLinkMatch.All">
            <span class="oi oi-arrow-left"></span> Volver a la lista
        </NavLink>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (isAlreadyClosed)
{
    <h3>Esta entrada ya ha sido cerrada y no puede modificarse</h3>
} else {
<EditForm Model="@Input" OnValidSubmit="UpdateInput">
    <FluentValidator />

    <div class="row">
        <RadzenFieldset Text="DATOS DE LA ENTRADA" class="mt-4 col-lg-7">
            <div class="row">
                <div class="form-group col-lg-3">
                    <label for="Campaign">Campaña:</label>
                    <RadzenTextBox Value="@Input.CampaignId.ToString()" Disabled="true" class="form-control" />
                </div>
                <div class="form-group col-lg-3">
                    <label for="entryNumber">Nº de Entrada:</label>
                    <RadzenTextBox Value="@Input.InputNumber.ToString()" Disabled="true" class="form-control" />
                </div>
                <div class="form-group col-lg-4">
                    <label for="date">Fecha de Entrada:</label>
                    <InputDate @bind-Value="Input.EntryDate" class="form-control" />
                    <ValidationMessage For="() => Input.EntryDate" />
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-12">
                    <label for="sellers">Fruticultores/Vendedores:</label>
                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value="Input.SellerIds" Multiple="true" Placeholder="Seleccione fruticultores..." Data="@customers" TextProperty="Name"
                                    Style="display: block;" Required />
                    <ValidationMessage For="@(() => Input.SellerIds)" />

                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-12">
                    <label for="buyer">Comprador:</label>
                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value="Input.BuyerId" Placeholder="Seleccione comprador..." Data="@customers" TextProperty="Name"
                                    Style="display: block;" Required />
                    <ValidationMessage For="@(() => Input.BuyerId)" />
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-12">
                    <label for="payer">Pagador:</label>
                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value="Input.PayerId" Placeholder="Seleccione pagador..." Data="@customers" TextProperty="Name"
                                    Style="display: block;" Required />
                    <ValidationMessage For="@(() => Input.PayerId)" />

                </div>
            </div>
        </RadzenFieldset>
        <RadzenFieldset Text="INFORMACIÓN ADICIONAL" class="mt-4 col-lg-5">
            <div class="row mt-1">
                <RadzenCheckBox @bind-Value="Input.HasHail" TValue="bool" /><RadzenLabel Text="Granizo" class="ml-1" />
            </div>
            <div class="row mt-1">
                <RadzenCheckBox @bind-Value="Input.HasPlague" TValue="bool" /><RadzenLabel Text="Plaga" class="ml-1"/>
            </div>
            <div class="row mt-1">
                <RadzenCheckBox @bind-Value="Input.HasSecondPasses" TValue="bool" /><RadzenLabel Text="Segundos pases" class="ml-1"/>
            </div>
            <div class="row mt-4">
                <div class="form-group col-lg-12">
                    <label for="observations">Observaciones:</label>
                    <InputTextArea id="observations" @bind-Value="Input.Observations" class="form-control" rows="5"/>
                    <ValidationMessage For="@(() => Input.Observations)" />
                </div>
            </div>
        </RadzenFieldset>
    </div>

    <hr />
    <div class="row mt-4 mb-4">
        <div class="col-lg-12">
            <div class="float-right">
                <button type="button" class="btn btn-outline-dark" @onclick="OnCancel">Cancelar</button>
                <button type="submit" class="btn btn-success"><span class="oi oi-check"></span> Guardar cambios</button>
            </div>
        </div>
    </div>
</EditForm>
}


@code {

    [Parameter]
    public int CampaignId { get; set; }
    [Parameter]
    public int InputNumber { get; set; }

    private UpdateInputCommand Input = new UpdateInputCommand();
    private IEnumerable<Campaign> Campaigns = new List<Campaign>();
    private IEnumerable<Customer> customers = new List<Customer>();
    private bool isLoading = true;
    private bool isAlreadyClosed = false;
    private string errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            customers = await customerService.GetAllAsync();
            var currentInput = await Mediator.Send(new GetInputQuery(CampaignId, InputNumber)).ConfigureAwait(false);

            isAlreadyClosed = currentInput.Closed;

            // Dropdown items are not marked by default because they are tracking two different data structures.
            var sellers = currentInput.Sellers.Select(x => x.CustomerId);

            Input.BuyerId = currentInput.Buyer.Id;
            Input.CampaignId = CampaignId;
            Input.EntryDate = currentInput.CreatedDate;
            Input.HasHail = currentInput.HasHail;
            Input.HasPlague = currentInput.HasPlague;
            Input.HasSecondPasses = currentInput.HasSecondPasses;
            Input.Observations = currentInput.Observations;
            Input.PayerId = currentInput.Payer.Id;
            Input.InputNumber = InputNumber;
            Input.SellerIds= customers.Where(x => sellers.Contains(x.CustomerId)).Select(x => x.CustomerId);

            isLoading = false;
            await InvokeAsync(() => { StateHasChanged(); });
        }

    }

    public async Task UpdateInput()
    {
        bool updated = await Mediator.Send(Input);
        if (updated)
        {
            var message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = "Entrada actualizada",
                Detail = "La entrada se ha actualizado correctamente",
                Duration = 4000
            };
            Notify(message);
            NavigationManager.NavigateTo($"entradas/{Input.CampaignId}/detalles/{Input.InputNumber}");

        }
        else
        {
            errorMessage = "Se ha producido un error. Inténtelo de nuevo.";
            var message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Se ha producido un error al actualizar la entrada.",
                Duration = 4000
            };
            Notify(message);
        }
    }

    public void OnCancel()
    {
        NavigationManager.NavigateTo("entradas");
    }

    private void Notify(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}
