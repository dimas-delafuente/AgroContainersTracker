@page "/entradas"

@using AgroContainerTracker.Domain.Companies
@using AgroContainerTracker.Core.Services

@inject IJSRuntime jsRuntime

@inject ICustomerService customerService
@inject ICampaignService CampaignService

@inject NavigationManager navigationManager
@inject DialogService dialogService
@inject NotificationService notificationService

<Loading ShowSpinner="@isLoading"></Loading>

<div class="row">
    <div class="col-8">
        <h1>Gestión de entradas</h1>
    </div>
    <div class="col-4 float-right">
        @*<button href="#" @onclick="() => ShowExportDialog()" class="btn btn-outline-primary float-right">
                <span class="oi oi-document"></span> Imprimir histórico
            </button>*@
    </div>
</div>

<div class="row mt-3 entries-header">
    <div class="col-lg-4">
        <a href="/entradas/nueva-entrada" class="btn btn-outline-primary"><span class="oi oi-plus"></span> Nueva entrada</a>
    </div>
    <div class="col-3">
        <label for="Campaign">Campaña:</label>
        <RadzenDropDown AllowFiltering="false" Data="campaignIds" @bind-Value="currentCampaign"
                        Style="display: block;" Change="@((value) => ChangeCampaign((int)value))" />
    </div>
</div>

@if (inputs == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div class="row mt-3">
        <div class="col-lg-12">
            <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10"
                        AllowSorting="true" Data="@inputs" TItem="Input" ColumnWidth="150px" EmptyText="No se han encontrado resultados.">
                <Columns>
                    <RadzenGridColumn TItem="Input" Property="InputNumber" Title="Entrada">
                        <Template Context="data">
                            @data.CampaignId@data.Id.ToString("000")
                        </Template>
                        <FooterTemplate>
                            Total: <b>@inputs.Count()</b>
                        </FooterTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Input" Property="EntryDate" Title="Fecha">
                        <Template Context="data">
                            @data.CreatedDate.ToString("dd/MM/yyyy")
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Input" Property="Closed" Title="Cerrada">
                        <Template Context="data">
                            @if(data.Closed) { <p>Si</p> }
                            else { <p>No</p>}
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Input" Property="Buyer.Name" Title="Comprador" />
                    <RadzenGridColumn TItem="Input" Property="Payer.Name" Title="Pagador" />

                    <RadzenGridColumn TItem="Input" Property="Sellers" Title="Fruticultores" Width="200px">
                        <Template Context="data">
                            @foreach (var seller in data?.Sellers)
                            {
                                <p>@seller.Name</p>
                            }
                        </Template>
                    </RadzenGridColumn>

                    <RadzenGridColumn TItem="Input" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="50px">
                        <Template Context="data">
                            <span class="oi oi-magnifying-glass" @onclick="() => OpenEntryDetails(data.Id)"></span>
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Input" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="50px">
                        <Template Context="data">
                            <span class="oi oi-pencil" @onclick="() => OpenEntryEdit(data.Id)"></span>
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Input" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="50px">
                        <Template Context="data">
                            <span class="oi oi-trash" @onclick="() => ShowRemoveEntryDialog(data)"></span>
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>
    </div>
}

@code {
    private List<Input> inputs = new List<Input>();
    private List<Customer> customers = new List<Customer>();
    private IEnumerable<int> campaignIds = new List<int>();

    private bool isLoading = true;
    private int currentCampaign = DateTime.Now.Year;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            inputs = (await Mediator.Send(new GetInputByCampaignIdQuery(currentCampaign))).ToList();
            campaignIds = (await Mediator.Send(new GetAllCampaignsQuery()).ConfigureAwait(false))?.ToList().Select(x => x.CampaignId);

            isLoading = false;
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    protected async Task ChangeCampaign(int campaignId)
    {
        isLoading = true;
        inputs = (await Mediator.Send(new GetInputByCampaignIdQuery(campaignId))).ToList();
        await InvokeAsync(() => { StateHasChanged(); });
        isLoading = false;
    }

    private void OpenEntryDetails(long InputNumber)
    {
        navigationManager.NavigateTo($"/entradas/{currentCampaign}/detalles/{InputNumber}");
    }

    private void OpenEntryEdit(long InputNumber)
    {
        navigationManager.NavigateTo($"/entradas/{currentCampaign}/editar/{InputNumber}");
    }

    private async Task ShowRemoveEntryDialog(Input Input)
    {
        await dialogService.OpenAsync("Eliminar entrada", ds =>
            @<div class="text-center" style="padding: 20px;">
                <p Style="margin-bottom: 10px;">¿Estás seguro de que quieres borrar este envase?</p>
                <div class="row">
                    <div class="col-md-12 text-center">
                        <RadzenButton Text="Cancelar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" />
                        <RadzenButton Text="Eliminar" Click="() => RemoveEntry(Input)" ButtonStyle="ButtonStyle.Danger" />
                    </div>
                </div>
            </div>
            );
    }

    private async Task RemoveEntry(Input Input)
    {
        NotificationMessage message;
        bool deleted = await Mediator.Send(new DeleteInputCommand(Input.CampaignId, Input.Id)).ConfigureAwait(false);
        dialogService.Close(true);


        if (deleted)
        {
            inputs.Remove(Input);
            await InvokeAsync(() => { StateHasChanged(); });

            message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = "Entrada eliminada",
                Detail = "La entrada se ha eliminado correctamente",
                Duration = 4000
            };
        }
        else
        {
            message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Se ha producido un error al borrar la entrada.",
                Duration = 4000
            };
        }

        Notify(message);
    }

    private void Notify(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}
