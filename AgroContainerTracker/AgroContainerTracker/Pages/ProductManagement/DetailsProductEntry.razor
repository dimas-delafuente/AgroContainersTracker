@page "/entradas/{CampaignId:int}/detalles/{InputNumber:int}"

@using AgroContainerTracker.Components.ProductManagement
@inject NotificationService notificationService

<Loading ShowSpinner="@isLoading"></Loading>

<div class="row">
    <div class="col-sm-4">
        <NavLink class="nav-link" href="/entradas" Match="NavLinkMatch.All">
            <span class="oi oi-arrow-left"></span> Volver a la lista
        </NavLink>
    </div>
</div>

@if (Input == null)
{
    <p><em>No se ha encontrado la Entrada @InputNumber de la Campaña @CampaignId</em></p>
}
else
{
    <div>
        <RadzenPanel AllowCollapse="true">
            <HeaderTemplate>
                <span style="float:left;">
                    <i class="oi oi-box details-icon"></i>
                    <b style="font-size:30px">DETALLES ENTRADA @Input.CampaignId@Input.Id.ToString("000")</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <RadzenCard>
                    <div class="row">

                        <RadzenFieldset Text="INFORMACIÓN" class="mt-4 col-lg-7">
                            <div class="row">
                                <div class="form-group col-lg-2">
                                    <label class="bold" for="Campaign">Campaña:</label>
                                    <p class="ml-1">@Input.CampaignId</p>
                                </div>
                                <div class="form-group col-lg-3">
                                    <label class="bold" for="number">Nº Entrada:</label>
                                    <p class="ml-1">@Input.Id</p>
                                </div>
                                <div class="form-group col-lg-4">
                                    <label class="bold" for="entryDate">Fecha Entrada:</label>
                                    <p class="ml-1">@Input.CreatedDate.ToString("dd/MM/yyyy")</p>
                                </div>
                                <div class="form-group col-lg-3">
                                    <label class="bold" for="exitDate">Estado:</label>
                                    @if (Input.Closed)
                                    {<p class="ml-1">Cerrada</p> }
                                    else
                                    {
                                        <button @onclick="() => CloseInput()" class="btn btn-outline-danger">Cerrar</button>
                                    }
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-12">
                                    <label class="bold" for="seller">Fruticultores/Vendedores:</label>
                                    @foreach (var seller in Input.Sellers)
                                    {
                                        <p class="ml-1">@seller.Name</p>
                                    }
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-12">
                                    <label class="bold" for="buyer">Comprador:</label>
                                    <p class="ml-1">@Input.Buyer?.Name</p>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-12">
                                    <label class="bold" for="payer">Pagador:</label>
                                    <p class="ml-1">@Input.Payer?.Name</p>
                                </div>
                            </div>
                        </RadzenFieldset>
                        <RadzenFieldset Text="INFORMACIÓN ADICIONAL" class="mt-4 col-lg-5">
                            <div class="row mt-1">
                                <RadzenCheckBox @bind-Value="Input.HasHail" TValue="bool" Disabled="true" /><RadzenLabel Text="Granizo" class="ml-1 bold" />
                            </div>
                            <div class="row mt-1">
                                <RadzenCheckBox @bind-Value="Input.HasPlague" TValue="bool" Disabled="true" /><RadzenLabel Text="Plaga" class="ml-1 bold" />
                            </div>
                            <div class="row mt-1">
                                <RadzenCheckBox @bind-Value="Input.HasSecondPasses" TValue="bool" Disabled="true" /><RadzenLabel Text="Segundos pases" class="ml-1 bold" />
                            </div>
                            <div class="row mt-4">
                                <div class="form-group col-lg-12">
                                    <label class="bold" for="observations">Observaciones:</label>
                                    <p class="ml-1">@Input.Observations</p>
                                </div>
                            </div>
                        </RadzenFieldset>
                    </div>

                </RadzenCard>
            </ChildContent>
        </RadzenPanel>
    </div>

    <WeighingList Input="@Input"></WeighingList>
}

<div class="row">
    <div class="col-sm-4">
        <NavLink class="nav-link" href="/entradas" Match="NavLinkMatch.All">
            <span class="oi oi-arrow-left"></span> Volver a la lista
        </NavLink>
    </div>
</div>

@code {
    [Parameter]
    public int CampaignId { get; set; }

    [Parameter]
    public int InputNumber { get; set; }

    private Input Input;
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadInput();
        }
    }

    protected async Task CloseInput()
    {
        bool closed = await Mediator.Send(new CloseInputCommand(CampaignId, InputNumber));

        if (closed)
        {
            await LoadInput();
        }
        else
        {
            var message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Se ha producido un error al cerrar la entrada.",
                Duration = 4000
            };
            Notify(message);
        }
    }

    private async Task LoadInput()
    {
        Input = await Mediator.Send(new GetInputQuery(CampaignId, InputNumber)).ConfigureAwait(false);
        isLoading = false;
        await InvokeAsync(() => { StateHasChanged(); });
    }


    private void Notify(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}
