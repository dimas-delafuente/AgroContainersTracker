@page "/rates/edit/{Id:int}"

@using AgroContainerTracker.Domain.Rates
@using AgroContainerTracker.Core.Services

@inject IRateService rateService
@inject NavigationManager NavigationManager
@inject NotificationService notificationService

<Loading ShowSpinner="@isLoading"></Loading>

<h1>Editar Tarifa</h1>

<div class="row mt-4">
    <div class="col-sm-4">
        <NavLink class="nav-link" href="/rates" Match="NavLinkMatch.All">
            <span class="oi oi-arrow-left"></span> Volver a la lista
        </NavLink>
    </div>
</div>


@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (rate == null)
{
    <p><em>No se ha encontrado la tarifa @Id</em></p>
}
else
{

    <EditForm Model="@rate" OnValidSubmit="UpdateCreditor">
        <FluentValidator></FluentValidator>

        <RadzenFieldset Text="INFORMACIÓN" class="mt-4">
            <div class="row">
                <div class="form-group col-lg-6">
                    <label for="name">Nombre:</label>
                    <InputText id="name" @bind-Value="rate.Name" class="form-control" />
                    <ValidationMessage For="@(() => rate.Name)" />
                </div>
                <div class="form-group col-lg-6">
                    <label for="description">Descripción:</label>
                    <InputTextArea id="description" @bind-Value="rate.Description" class="form-control" />
                    <ValidationMessage For="@(() => rate.Description)" />
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-6">
                    <label for="value">Precio/día:</label>
                    <InputNumber id="value" name="value" @bind-Value="rate.Value" class="form-control" />
                    <ValidationMessage For="@(() => rate.Value)" />
                </div>
                <div class="form-group col-lg-6">
                    <label for="value2">Precio/día adicional:</label>
                    <InputNumber id="value2" name="value2" @bind-Value="rate.SecondaryValue" class="form-control" />
                    <ValidationMessage For="@(() => rate.SecondaryValue)" />
                </div>

            </div>
        </RadzenFieldset>

        <hr />
        <div class="row mt-4 mb-4">
            <div class="col-lg-12">
                <div class="float-right">
                    <button type="button" class="btn btn-outline-dark" @onclick="OnCancel">Cancelar</button>
                    <button type="submit" class="btn btn-success"><span class="oi oi-check"></span> Guardar cambios</button>
                </div>
            </div>
        </div>
    </EditForm>

}
@code {

    [Parameter]
    public int Id { get; set; }

    private Rate rate = new Rate();
    private string errorMessage;
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            rate = await rateService.GetByIdAsync(Id).ConfigureAwait(false);
            isLoading = false;
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    public async Task UpdateCreditor()
    {
        bool updated = await rateService.UpdateAsync(rate).ConfigureAwait(false);

        if (updated)
        {
            var message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = "Tarifa modificada",
                Detail = "La tarifa se ha modificado correctamente",
                Duration = 4000
            };
            Notify(message);
            NavigationManager.NavigateTo("rates");
        }
        else
        {
            errorMessage = "Se ha producido un error. Revise los campos e inténtelo de nuevo.";
            NotifyError();

        }
    }

    public void OnCancel()
    {
        NavigationManager.NavigateTo("rates");
    }

    private void Notify(NotificationMessage message)
    {
        notificationService.Notify(message);
    }

    private void NotifyError()
    {
        var message = new NotificationMessage()
        {
            Severity = NotificationSeverity.Error,
            Summary = "Error",
            Detail = "Se ha producido un error al modificar la tarifa.",
            Duration = 4000
        };
        Notify(message);
    }
}
