@using AgroContainerTracker.Domain.ProductManagement
@using AgroContainerTracker.Domain.Packagings
@using AgroContainerTracker.Domain.Reports
@using AgroContainerTracker.Core.Services
@using AgroContainerTracker.Core.Services.Reports

@inject IWeighingService WeighingService
@inject ILabelReportFactory labelReportFactory
@inject DialogService dialogService
@inject NotificationService notificationService
@inject IJSRuntime jsRuntime

<Loading ShowSpinner="@isLoading"></Loading>

<RadzenPanel AllowCollapse="true">
    <HeaderTemplate>
        <span style="float:left;">
            <b style="font-size:30px">PESADAS</b>
        </span>
    </HeaderTemplate>
    <ChildContent>
        <RadzenCard>
            @if (!Input.HasProductExit)
            {
                <div class="row mt-5">
                    <div class="col-lg-4">
                        <button @onclick="() => ShowNewWeightingDialog()" class="btn btn-outline-primary"><span class="oi oi-plus"></span> Nueva pesada</button>
                    </div>
                </div>
            }
            <div class="row mt-5">
                <div class="col-lg-12">
                    <RadzenGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10"
                                AllowSorting="true" Data="@Weighings" TItem="Weighing" ColumnWidth="150px" EmptyText="No se han encontrado resultados.">
                        <Columns>
                            <RadzenGridColumn TItem="Weighing" Property="WeighingId" Width="80px" Title="Nº" TextAlign="TextAlign.Right">
                                <FooterTemplate>
                                    Total: <b>@Weighings.Count()</b>
                                </FooterTemplate>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="Weighing" Property="Storage.Number" Title="Cámara" />
                            <RadzenGridColumn TItem="Weighing" Property="Fruit.Name" Title="Fruta" />
                            <RadzenGridColumn TItem="Weighing" TextAlign="TextAlign.Right" Title="Palots">
                                <Template Context="data">
                                    @GetProductQuantity(data, PackagingType.Palot)
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="Weighing" TextAlign="TextAlign.Right" Title="Palets">
                                <Template Context="data">
                                    @GetProductQuantity(data, PackagingType.Palet)
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="Weighing" TextAlign="TextAlign.Right" Title="Cajas">
                                <Template Context="data">
                                    @GetProductQuantity(data, PackagingType.Caja)
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="Weighing" Property="GrossWeight" Title="Peso Bruto" TextAlign="TextAlign.Right" />
                            <RadzenGridColumn TItem="Weighing" Property="TareWeight" Title="Destare" TextAlign="TextAlign.Right" />
                            <RadzenGridColumn TItem="Weighing" Property="NetWeight" Title="Peso Neto" TextAlign="TextAlign.Right" />
                            @if (!Input.HasProductExit)
                            {
                                <RadzenGridColumn TItem="Weighing" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="50px">
                                    <Template Context="data">
                                        <span class="oi oi-print" @onclick="() => PrintWeighing(data)"></span>
                                    </Template>
                                </RadzenGridColumn>
                                <RadzenGridColumn TItem="Weighing" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="50px">
                                    <Template Context="data">
                                        <span class="oi oi-magnifying-glass" @onclick="() => OpenWeightingDetails(data.WeighingId)"></span>
                                    </Template>
                                </RadzenGridColumn>
                                <RadzenGridColumn TItem="Weighing" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="50px">
                                    <Template Context="data">
                                        <span class="oi oi-pencil" @onclick="() => OpenWeightingEdit(data.WeighingId)"></span>
                                    </Template>
                                </RadzenGridColumn>
                                <RadzenGridColumn TItem="Weighing" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="50px">
                                    <Template Context="data">
                                        <span class="oi oi-trash" @onclick="() => ShowRemoveWeightingDialog(data.WeighingId)"></span>
                                    </Template>
                                </RadzenGridColumn>
                            }
                        </Columns>
                    </RadzenGrid>
                </div>
            </div>

        </RadzenCard>
    </ChildContent>
</RadzenPanel>

@code {

    [Parameter]
    public Input Input { get; set; }

    private List<Weighing> Weighings = new List<Weighing>();
    private bool isLoading = true;
    private int currentCampaign = DateTime.Now.Year;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadWeighings().ConfigureAwait(false);
        }
    }

    private async Task LoadWeighings()
    {
        Weighings = await WeighingService.GetAllAsync(Input.CampaignId, Input.InputNumber);
        isLoading = false;
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task ShowNewWeightingDialog()
    {

        await dialogService.OpenAsync("Nueva Pesada", ds =>
            @<CreateWeighing OnWeighingCreated="AddWeighing"
                                    Input="@Input"
                                    OnCancel="CloseDialog">
            </CreateWeighing>,
        new DialogOptions { Width = "60%" });
    }

    private async Task ShowRemoveWeightingDialog(int WeighingId)
    {

        await dialogService.OpenAsync("Eliminar pesada", ds =>
            @<RemoveWeighing OnWeighingRemoved="RemoveWeighing"
                                    WeighingId="@WeighingId"
                                    OnCancel="CloseDialog">
            </RemoveWeighing>
        );
    }

    private async Task OpenWeightingDetails(int WeighingId)
    {

        await dialogService.OpenAsync("Detalles Pesada", ds =>
            @<DetailsWeighing WeighingId="@WeighingId"
                                     OnCancel="CloseDialog">
            </DetailsWeighing>,
            new DialogOptions { Width = "60%" }
        );
    }

    private async Task OpenWeightingEdit(int WeighingId)
    {

        await dialogService.OpenAsync("Nueva Pesada", ds =>
            @<EditWeighing OnWeighingUpdated="UpdateWeighing"
                                  WeighingId="WeighingId"
                                  Input="@Input"
                                  OnCancel="CloseDialog">
            </EditWeighing>,
        new DialogOptions { Width = "60%" });
        }

        private async Task AddWeighing(Weighing Weighing)
        {
            CloseDialog();
            Weighings.Add(Weighing);

            await InvokeAsync(() => { StateHasChanged(); });
        }

        private async Task UpdateWeighing(Weighing Weighing)
        {
            CloseDialog();
            var currentWeighingIndex = Weighings.FindIndex(x => x.WeighingId.Equals(Weighing.WeighingId));

            Weighings[currentWeighingIndex] = Weighing;

            await InvokeAsync(() => { StateHasChanged(); });
        }

        private async Task RemoveWeighing(int WeighingId)
        {
            CloseDialog();
            Weighings.Remove(Weighings.FirstOrDefault(x => x.WeighingId.Equals(WeighingId)));
            await InvokeAsync(() => { StateHasChanged(); });
        }

        private int GetProductQuantity(Weighing Weighing, PackagingType type)
        {
            var productRecords = Weighing.ProductRecords.Where(x => x.Packaging.Type.Equals(type));
            return productRecords?.Count() > 0 ? productRecords.Sum(x => x.Quantity) : 0;
        }

        private async Task PrintWeighing(Weighing Weighing)
        {
            var report = new LabelReport { 
                Weighing = Weighing
            };
            byte[] reportPDFData = await labelReportFactory.BuildReport(report, LabelType.CUSTOM);

            if (reportPDFData == null)
            {
                var message = new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = $"Se ha producido un error al generar el documento.",
                    Duration = 4000
                };

            }
            else
                await jsRuntime.InvokeVoidAsync("printFile", Convert.ToBase64String(reportPDFData));
            isLoading = false;
        }

        private void CloseDialog()
        {
            dialogService.Close();
        }
    }
