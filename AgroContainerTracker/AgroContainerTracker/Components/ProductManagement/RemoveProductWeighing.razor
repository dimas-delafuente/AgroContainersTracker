@using AgroContainerTracker.Core.Services
@inject IWeighingService WeighingService
@inject NotificationService notificationService

<div class="text-center" style="padding: 20px;">
    <p Style="margin-bottom: 10px;">¿Estás seguro de que quieres borrar esta pesada?</p>
    <div class="row">
        <div class="col-md-12 text-center">
            <RadzenButton Text="Cancelar" Click="() => OnRemoveCancel()" ButtonStyle="ButtonStyle.Secondary" />
            <RadzenButton Text="Eliminar" Click="() => RemoveWeighting()" ButtonStyle="ButtonStyle.Danger" />
        </div>
    </div>
</div>


@code {

    [Parameter]
    public int WeighingId { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<int> OnWeighingRemoved { get; set; }

    private async Task RemoveWeighting()
    {
        NotificationMessage message;
        bool deleted = await WeighingService.DeleteAsync(WeighingId);

        if (deleted)
        {
            message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = "Pesada eliminada",
                Detail = "La pesada se ha eliminado correctamente",
                Duration = 4000
            };
            await OnWeighingRemoved.InvokeAsync(WeighingId);
        }
        else
        {
            message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Se ha producido un error al borrar la pesada.",
                Duration = 4000
            };
        }

        Notify(message);
    }

    private async Task OnRemoveCancel()
    {
        await OnCancel.InvokeAsync(null);
    }

    private void Notify(NotificationMessage message)
    {
        notificationService.Notify(message);
    }

}
