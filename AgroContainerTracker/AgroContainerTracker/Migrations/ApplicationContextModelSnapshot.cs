// <auto-generated />
using System;
using AgroContainerTracker.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AgroContainerTracker.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.CarrierEntity", b =>
                {
                    b.Property<int>("CarrierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("CarrierNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("CountryId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(300)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Locality")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(9)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(5)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("SanitaryRegistrationNumber")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("State")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("CarrierId")
                        .HasName("PRIMARY");

                    b.HasIndex("CountryId");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.ContainerEntity", b =>
                {
                    b.Property<int>("ContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<double>("Size")
                        .HasColumnType("double");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.HasKey("ContainerId")
                        .HasName("PRIMARY");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.CountryEntity", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("CountryId")
                        .HasName("PRIMARY");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.CreditorEntity", b =>
                {
                    b.Property<int>("CreditorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("CountryId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreditorNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(300)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Locality")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(9)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(5)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("State")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("CreditorId")
                        .HasName("PRIMARY");

                    b.HasIndex("CountryId");

                    b.ToTable("Creditors");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.CustomerEntity", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("BankAccount")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("CountryId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(300)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Locality")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(9)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(5)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("RateId")
                        .HasColumnType("int(11)");

                    b.Property<string>("State")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("CustomerId")
                        .HasName("PRIMARY");

                    b.HasIndex("CountryId");

                    b.HasIndex("RateId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.DriverEntity", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("CarrierId")
                        .HasColumnType("int(11)");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("DriverId")
                        .HasName("PRIMARY");

                    b.HasIndex("CarrierId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.FruitEntity", b =>
                {
                    b.Property<int>("FruitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(5)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("FruitId")
                        .HasName("PRIMARY");

                    b.ToTable("Fruits");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.PackagingEntity", b =>
                {
                    b.Property<int>("PackagingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<ulong>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(25)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<sbyte>("Material")
                        .HasColumnType("tinyint");

                    b.Property<int>("Total")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(6,3)");

                    b.HasKey("PackagingId")
                        .HasName("PRIMARY");

                    b.HasIndex("CustomerId");

                    b.ToTable("Packagings");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.PackagingMovementEntity", b =>
                {
                    b.Property<int>("PackagingMovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("Operation")
                        .HasColumnType("tinyint");

                    b.Property<int>("PackagingId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Total")
                        .HasColumnType("int(11)");

                    b.HasKey("PackagingMovementId")
                        .HasName("PRIMARY");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PackagingId");

                    b.ToTable("PackagingMovements");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.PalotEntity", b =>
                {
                    b.Property<int>("PalotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ArrivalNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ContainerId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FruitId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PalotCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("SellerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("PalotId")
                        .HasName("PRIMARY");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("FruitId");

                    b.HasIndex("SellerId");

                    b.ToTable("Palots");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.RateEntity", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(300)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<decimal>("SecondaryValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(7,5)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(7,5)")
                        .HasDefaultValue(0m);

                    b.HasKey("RateId")
                        .HasName("PRIMARY");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.SupplierEntity", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("CountryId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(300)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Locality")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(9)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(5)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("State")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("SupplierNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("SupplierId")
                        .HasName("PRIMARY");

                    b.HasIndex("CountryId")
                        .HasName("FK_Suppliers_Countries_CountryId_idx");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.VehicleEntity", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("CarriageRegistrationNumber")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("CarrierId")
                        .HasColumnType("int(11)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("VehicleId")
                        .HasName("PRIMARY");

                    b.HasIndex("CarrierId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.CarrierEntity", b =>
                {
                    b.HasOne("AgroContainerTracker.Data.Entities.CountryEntity", "Country")
                        .WithMany("Carriers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.CreditorEntity", b =>
                {
                    b.HasOne("AgroContainerTracker.Data.Entities.CountryEntity", "Country")
                        .WithMany("Creditors")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.CustomerEntity", b =>
                {
                    b.HasOne("AgroContainerTracker.Data.Entities.CountryEntity", "Country")
                        .WithMany("Customers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgroContainerTracker.Data.Entities.RateEntity", "Rate")
                        .WithMany("Customers")
                        .HasForeignKey("RateId");
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.DriverEntity", b =>
                {
                    b.HasOne("AgroContainerTracker.Data.Entities.CarrierEntity", "CarrierCompany")
                        .WithMany("Drivers")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.PackagingEntity", b =>
                {
                    b.HasOne("AgroContainerTracker.Data.Entities.CustomerEntity", "Owner")
                        .WithMany("Packagings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.PackagingMovementEntity", b =>
                {
                    b.HasOne("AgroContainerTracker.Data.Entities.CustomerEntity", "Customer")
                        .WithMany("PackagingMovements")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AgroContainerTracker.Data.Entities.PackagingEntity", "Packaging")
                        .WithMany("PackagingMovements")
                        .HasForeignKey("PackagingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.PalotEntity", b =>
                {
                    b.HasOne("AgroContainerTracker.Data.Entities.CustomerEntity", "Buyer")
                        .WithMany("PalotsBuyer")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroContainerTracker.Data.Entities.ContainerEntity", "Container")
                        .WithMany("Palots")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroContainerTracker.Data.Entities.FruitEntity", "Fruit")
                        .WithMany("Palots")
                        .HasForeignKey("FruitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroContainerTracker.Data.Entities.CustomerEntity", "Seller")
                        .WithMany("PalotsSeller")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.SupplierEntity", b =>
                {
                    b.HasOne("AgroContainerTracker.Data.Entities.CountryEntity", "Country")
                        .WithMany("Suppliers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AgroContainerTracker.Data.Entities.VehicleEntity", b =>
                {
                    b.HasOne("AgroContainerTracker.Data.Entities.CarrierEntity", "CarrierCompany")
                        .WithMany("Vehicles")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
